<?xml version="1.0" encoding="UTF-8"?>
<!--配置文件优先级，从高到低-->
<!--log4j.configurationFile,log4j2-test.properties,log4j2-test.yaml,
log4j2-test.yml,log4j2-test.json,log4j2-test.jsn,log4j2-test.xml,log4j2.properties,
log4j2.yaml,log4j2.yml,log4j2.json,log4j2.jsn,log4j2.xml-->
<!--monitorInterval:指定间隔监控配置文件是否更改，更改后自动重新配置，不需要重启服务。-->
<configuration name="esn-palmyy-plugin" status="info" monitorInterval="5" strict="false">

    <properties>
        <property name="receipients">to-mail@mail.com</property>
        <property name="from">from-mail@mail.com</property>
        <property name="smtpHost">mail.host.com</property>
        <property name="smtpPort">25</property>
        <property name="smtpProtocol">smtp</property>
        <property name="smtpUser">from-mail@mail.com</property>
        <property name="smtpPassword">password</property>
        <property name="smtpSubject">日志主题信息</property>
    </properties>

    <appenders>

        <!--打印日志到控制台-->
        <Console name="stdout" target="SYSTEM_OUT">
            <!--<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>

        <!--将info级别的信息追加到info.log日志文件-->
        <RollingFile name="infoLog"
                     fileName="${catalina.home}/logs/esn-palmyy-plugin/info.log"
                     append="true"
                     filePattern="${catalina.home}/logs/esn-palmyy-plugin/info.log.%d{yyyy-MM-dd}">
            <PatternLayout
                    pattern="%d{yyyy.MM.dd 'at' HH:mm:ss.SSS z} %-5level %class{36} %L %M - %msg%xEx%n"/>
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
            </Policies>
        </RollingFile>

        <!--将error级别的信息追加到error.log日志文件-->
        <RollingFile name="errorLog"
                     fileName="${catalina.home}/logs/esn-palmyy-plugin/error.log"
                     append="true"
                     filePattern="${catalina.home}/logs/esn-palmyy-plugin/error.log.%d{yyyy-MM-dd}">
            <PatternLayout
                    pattern="%d{yyyy.MM.dd 'at' HH:mm:ss.SSS z} %-5level %class{36} %L %M - %msg%xEx%n"/>
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
            </Policies>
        </RollingFile>

        <!--将特定的信息追加到error-esn.log日志文件-->
        <RollingFile name="errorEsnLog"
                     fileName="${catalina.home}/logs/esn-palmyy-plugin/error-esn.log"
                     append="true"
                     filePattern="${catalina.home}/logs/esn-palmyy-plugin/error-esn.log.%d{yyyy-MM-dd}">
            <PatternLayout pattern="%d %-5p %t - %c %l - %m%n"/>
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
            </Policies>
        </RollingFile>

        <!-- 配置日志发送邮件的标签，其中“${}”引用的配置都在最上面定义好了-->
        <SMTP name="Mailer"
              subject="${smtpSubject}" to="${receipients}" from="${from}"
              smtpHost="${smtpHost}" smtpPort="${smtpPort}"
              smtpProtocol="${smtpProtocol}" smtpUsername="${smtpUser}"
              smtpPassword="${smtpPassword}" smtpDebug="false" bufferSize="1024">
            <customHtmlLayout/>
        </SMTP>

        <!-- 异步发送邮件日志 -->
        <Async name="AsyncMailer">
            <appender-ref ref="Mailer"/>
        </Async>

        <!--配置日志写入mysql数据库 -->
        <JDBC name="databaseAppender" tableName="logger_info">
            <ConnectionFactory class="com.yonyou.esn.palmyy.common.LoggerConnectionFactory"
                               method="getDatabaseConnection"/>
            <Column name="thread_name" pattern="%t"/>
            <Column name="class_name" pattern="%C"/>
            <Column name="method_name" pattern="%method"/>
            <Column name="beginTime" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS}"/>
            <Column name="logger_level" pattern="%level"/>
            <Column name="logger_name" pattern="%c"/>
            <Column name="logger_message" pattern="%m"/>
            <Column name="logger_throwable" pattern="%throwable{3}"/>
            <Column name="createTime" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS}"/>
        </JDBC>
        <!--
        tableName是数据库中的表名
        <Column>的name属性是指定数据库表中的字段名，pattern是匹配日志的内容格式，会将对应的内容写入到指定的字段下。
        <ConnectionFactory> 需要自定义数据库连接工厂类，并提供获取DataSource或者Connection的静态方法。
        -->

        <!--异步写入数据库-->
        <Async name="AsyncDatabaseAppender">
            <appender-ref ref="databaseAppender"/>
        </Async>

        <!--异步写入nosql中，如mongo-->
        <Async name="asyncNoSqlDbLogger">
            <appender-ref ref="noSqlDbAppender"/>
        </Async>

        <!--日志输出到Nosql数据库-->
        <NoSql name="noSqlDbAppender">
            <MongoDb databaseName="esn-palmyy" collectionName="log_info" server="172.20.9.41"
                     port="27017"/>
        </NoSql>
    </appenders>


    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效
      <logger>标签可以在<Root>标签中引用（全局使用）也可以在类调用时指定引用的名称，定向调用
      如：private static final Logger LOGGER_MAIL= LoggerFactory.getLogger("AsyncMailerLogger");
      LOGGER_MAIL的日志都只会发送邮件，不写到文件中

    -->
    <loggers>
        <logger name="AsyncMailerLogger" level="error" additivity="false">
            <appender-ref ref="Mailer"/>
        </logger>

        <logger name="noSqlDbLogger" level="info" additivity="false">
            <appender-ref ref="noSqlDbAppender"/>
        </logger>

        <logger name="AsyncDBLogger" level="error" additivity="false">
            <appender-ref ref="databaseAppender"/>
        </logger>

        <Logger name="errorEsnLogger" level="error" additivity="true">
            <AppenderRef ref="errorEsnLog"/>
        </Logger>

        <Root level="debug">
            <AppenderRef ref="stdout"/>
            <AppenderRef ref="errorLog"/>
            <AppenderRef ref="infoLog"/>
        </Root>
    </loggers>

</configuration>